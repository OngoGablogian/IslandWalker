--- engine/abilities/battle_abilities.asm
+++ engine/abilities/battle_abilities.asm
@@ -206,25 +206,99 @@ Check_Trap_Ability:
 ; Let's get the ability name in case we need it
     call Ability_LoadAbilityName
 ; Right so if the enemy is checking us, that means b is a 0, and we do not return. If the
 ; enemy is blocking us on the other hand, b is a 1 and we need to print out something.
     xor a
     cp b
     jr z, .cant_escape
     ld hl, AbilityText_PreventedEscapeAbility
     call StdAbilityTextbox
 .cant_escape
     ld a, 1
     and a
     jr .done
 	
 
 ; Shell Armor and Battle Armor prevent critical hits. Z is returned if the ability blocks critical hits entirely.
  
 
 Check_CritBlockingAbility:
     call GetAbility
     call Ability_LoadTracedAbility
     cp BATTLE_ARMOR
     ret z
     cp SHELL_ARMOR
     ret
+
+; Ruby/Sapphire PICKUP ability: chance to find an item after battle
+HandlePickup::
+    ld a, [wPartyCount]
+    and a
+    ret z
+    xor a
+    ld [wCurPartyMon], a
+.loop_mons
+    ld a, [wCurPartyMon]
+    ld c, a
+    ld a, [wPartyCount]
+    cp c
+    ret z
+    ; Check ability
+    ld a, c
+    ld hl, wPartyMon1Species
+    call GetPartyLocation
+    ld d, [hl] ; preserve species
+    ld a, [wCurPartyMon]
+    ld hl, wPartyMon1Personality
+    call GetPartyLocation
+    ld c, d
+    call GetAbility
+    cp PICKUP
+    jr nz, .next_mon
+    ; Check if holding an item
+    ld a, [wCurPartyMon]
+    ld hl, wPartyMon1Item
+    call GetPartyLocation
+    ld a, [hl]
+    and a
+    jr nz, .next_mon
+    ; 10% chance to pick up an item
+    call BattleRandom
+    cp 10 percent
+    jr nc, .next_mon
+    call Pickup_GetItem
+    ld [hl], a
+    push af
+    ; Get nickname into wStringBuffer2
+    call GetCurNickname
+    ld de, wStringBuffer1
+    call CopyName1
+    ; Get item name into wStringBuffer1
+    pop af
+    ld [wNamedObjectIndex], a
+    call GetItemName
+    ; Display message
+    ld hl, AbilityText_PickupFoundItem
+    call StdAbilityTextbox
+.next_mon
+    ld hl, wCurPartyMon
+    inc [hl]
+    jr .loop_mons
+
+; Select a random item based on Pickup probabilities
+Pickup_GetItem:
+    ld a, 100
+    call BattleRandomRange
+    ld hl, PickupItems
+.item_loop
+    ld b, [hl]
+    inc hl
+    cp b
+    jr c, .got_item
+    sub b
+    inc hl
+    jr .item_loop
+.got_item
+    ld a, [hl]
+    ret
+
+INCLUDE "data/abilities/pickup_items.asm"
