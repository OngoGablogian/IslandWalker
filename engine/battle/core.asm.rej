--- engine/battle/core.asm
+++ engine/battle/core.asm
@@ -260,73 +260,79 @@ BattleTurn:
 	call Battle_PlayerFirst
 .proceed
 	ld a, [wForcedSwitch]
 	and a
 	ret nz
 
 	ld a, [wBattleEnded]
 	and a
 	ret nz
 
 	call HandleBetweenTurnEffects
 	ld a, [wBattleEnded]
 	and a
 	ret nz
 	jr .loop
 
 HandleBetweenTurnEffects:
 	ldh a, [hSerialConnectionStatus]
 	cp USING_EXTERNAL_CLOCK
 	jr z, .CheckEnemyFirst
 	call CheckFaint_PlayerThenEnemy
 	ret c
 	call HandleFutureSight
 	call CheckFaint_PlayerThenEnemy
 	ret c
-	call HandleWeather
-	call CheckFaint_PlayerThenEnemy
-	ret c
-	call HandleWrap
+        call HandleWeather
+        call CheckFaint_PlayerThenEnemy
+        ret c
+farcall HandleTerrain
+        call CheckFaint_PlayerThenEnemy
+        ret c
+        call HandleWrap
 	call CheckFaint_PlayerThenEnemy
 	ret c
         call HandlePerishSong
         call CheckFaint_PlayerThenEnemy
         ret c
         farcall HandleSpeedBoost
         farcall HandleShedSkin
         jr .NoMoreFaintingConditions
 
 .CheckEnemyFirst:
 	call CheckFaint_EnemyThenPlayer
 	ret c
 	call HandleFutureSight
 	call CheckFaint_EnemyThenPlayer
 	ret c
-	call HandleWeather
-	call CheckFaint_EnemyThenPlayer
-	ret c
-	call HandleWrap
+        call HandleWeather
+        call CheckFaint_EnemyThenPlayer
+        ret c
+farcall HandleTerrain
+        call CheckFaint_EnemyThenPlayer
+        ret c
+        call HandleWrap
 	call CheckFaint_EnemyThenPlayer
 	ret c
         call HandlePerishSong
         call CheckFaint_EnemyThenPlayer
         ret c
         farcall HandleSpeedBoost
         farcall HandleShedSkin
 
 .NoMoreFaintingConditions:
 	call HandleLeftovers
 	call HandleMysteryberry
 	call HandleDefrost
 	call HandleSafeguard
 	call HandleScreens
 	call HandleStatBoostingHeldItems
 	call HandleHealingItems
 	call UpdateBattleMonInParty
 	call LoadTilemapToTempTilemap
 	jmp HandleEncore
 
 HasAnyoneFainted:
 	call HasPlayerFainted
 	jmp nz, HasEnemyFainted
 	ret
 
@@ -1833,64 +1839,64 @@ HandleScreens:
 	call StdBattleTextbox
 	pop de
 	pop hl
 	ret
 
 .ReflectTick:
 	inc de
 	ld a, [de]
 	dec a
 	ld [de], a
 	ret nz
 	res SCREENS_REFLECT, [hl]
 	ld hl, BattleText_MonsReflectFaded
 	jmp StdBattleTextbox
 
 HandleWeather:
         ld a, [wBattleWeather]
         cp WEATHER_NONE
         ret z
 
         ld hl, wWeatherCount
         dec [hl]
         jr nz, .continues
 
 ; ended
-	ld hl, .WeatherEndedMessages
-	call .PrintWeatherMessage
+	ld hl, BattleWeather_EndedMessages
+	farcall BattleWeather_PrintMessage
 	xor a
 	ld [wBattleWeather], a
 	farcall Ability_RecalculateStatsForWeather
 	ret
 
 .continues
 	farcall Ability_RecalculateStatsForWeather
 	farcall Ability_CheckCloudNine
-        ret z
-        ld hl, .WeatherMessages
-        call .PrintWeatherMessage
-	call .PlayWeatherAnimation
+	ret z
+	ld hl, BattleWeather_Messages
+	farcall BattleWeather_PrintMessage
+	farcall BattleWeather_PlayAnimation
 
 	ld a, [wBattleWeather]
 	cp WEATHER_RAIN
 	jr nz, .skip_rain_dish
 	farcall HandleRainDish
 .skip_rain_dish
 
 ;check_sandstorm
 	ld a, [wBattleWeather]
 	cp WEATHER_SANDSTORM
 	jr nz, .check_hail
 
 	ldh a, [hSerialConnectionStatus]
 	cp USING_EXTERNAL_CLOCK
 	jr z, .enemy_first
 
 .player_first
 	call SetPlayerTurn
 	call .SandstormDamage
 	call SetEnemyTurn
 	jr .SandstormDamage
 
 .enemy_first
 	call SetEnemyTurn
 	call .SandstormDamage
@@ -1955,101 +1961,52 @@ HandleWeather:
 	call GetBattleVar
 	bit SUBSTATUS_UNDERGROUND, a
 	ret nz
 
 	ld hl, wBattleMonType1
 	ldh a, [hBattleTurn]
 	and a
 	jr z, .ok1
 	ld hl, wEnemyMonType1
 .ok1
 	ld a, [hli]
 	cp ICE
 	ret z
 
 	ld a, [hl]
 	cp ICE
 	ret z
 
 	call GetSixteenthMaxHP
 	call SubtractHPFromUser
 
 	ld hl, PeltedByHailText
 	jp StdBattleTextbox
 
 
-.PlayWeatherAnimation:
-	call SetPlayerTurn
-.weather_ability_skip
-	xor a ; uses one byte of ROM, compared to two for "ld a, 1"
-	ld [wBattleAfterAnim], a
-	ld hl, .WeatherAnimations
-	ld a, [wBattleWeather]
-	dec a
-	ld b, 0
-	ld c, a
-	add hl, bc
-	add hl, bc
-	ld a, [hli]
-	ld e, a
-	ld d, [hl]
-	jmp Call_PlayBattleAnim
-
-.WeatherAnimations:
-	dw RAIN_DANCE
-	dw SUNNY_DAY
-	dw SANDSTORM
-	dw HAIL
-
-.PrintWeatherMessage:
-	ld a, [wBattleWeather]
-	dec a
-	ld c, a
-	ld b, 0
-	add hl, bc
-	add hl, bc
-	ld a, [hli]
-	ld h, [hl]
-	ld l, a
-	jmp StdBattleTextbox
-
-.WeatherMessages:
-; entries correspond to WEATHER_* constants
-	dw BattleText_RainContinuesToFall
-	dw BattleText_TheSunlightIsStrong
-	dw BattleText_TheSandstormRages
-	dw BattleText_HailContinuesToFall
-
-.WeatherEndedMessages:
-; entries correspond to WEATHER_* constants
-	dw BattleText_TheRainStopped
-	dw BattleText_TheSunlightFaded
-	dw BattleText_TheSandstormSubsided
-	dw BattleText_TheHailStopped
-
 SubtractHPFromTarget:
-	call SubtractHP
+        call SubtractHP
 	jmp UpdateHPBar
 
 SubtractHPFromUser:
 ; Subtract HP from mon
 	call SubtractHP
 	jmp UpdateHPBarBattleHuds
 
 SubtractHP:
 	ld hl, wBattleMonHP
 	ldh a, [hBattleTurn]
 	and a
 	jr z, .ok
 	ld hl, wEnemyMonHP
 .ok
 	inc hl
 	ld a, [hl]
 	ld [wHPBuffer2], a
 	sub c
 	ld [hld], a
 	ld [wHPBuffer3], a
 	ld a, [hl]
 	ld [wHPBuffer2 + 1], a
 	sbc b
 	ld [hl], a
 	ld [wHPBuffer3 + 1], a
@@ -4179,54 +4136,60 @@ TryToRunAwayFromBattle:
 	ret
 
 InitBattleMon:
 	ld a, MON_SPECIES
 	call GetPartyParamLocation
 	ld de, wBattleMonSpecies
 	ld bc, MON_OT_ID
 	rst CopyBytes
 	ld bc, MON_IVS - MON_OT_ID
 	add hl, bc
 	ld de, wBattleMonIVs
 	ld bc, MON_POKERUS - MON_IVS
 	rst CopyBytes
 	inc hl
 	inc hl
 	inc hl
 	inc hl
 	ld de, wBattleMonLevel
 	ld bc, PARTYMON_STRUCT_LENGTH - MON_LEVEL
 	rst CopyBytes
 	ld a, [wBattleMonSpecies]
 	ld [wTempBattleMonSpecies], a
 	ld [wCurPartySpecies], a
 	ld [wCurSpecies], a
 	call GetBaseData
-	ld a, [wBaseType1]
-	ld [wBattleMonType1], a
-	ld a, [wBaseType2]
-	ld [wBattleMonType2], a
+        ld a, [wBaseType1]
+        ld [wBattleMonType1], a
+        ld a, [wBaseType2]
+        ld [wBattleMonType2], a
+        ld a, [wBattleMonType1]
+        ld [wBattleMonOriginalType1], a
+        ld a, [wBattleMonType2]
+        ld [wBattleMonOriginalType2], a
+        xor a
+        ld [wBattleMonMimicryActive], a
 	ld hl, wPartyMonNicknames
 	ld a, [wCurBattleMon]
 	call SkipNames
 	ld de, wBattleMonNickname
 	ld bc, MON_NAME_LENGTH
 	rst CopyBytes
 	ld hl, wBattleMonAttack
 	ld de, wPlayerStats
 	ld bc, PARTYMON_STRUCT_LENGTH - MON_ATK
 	rst CopyBytes
         farcall ApplyStatusEffectOnPlayerStats
 	jmp BadgeStatBoosts
 
 BattleCheckPlayerShininess:
 	call GetPartyMonShiny
 	jr BattleCheckShininess
 
 BattleCheckEnemyShininess:
 	call GetEnemyMonShiny
 
 BattleCheckShininess:
 	ld b, h
 	ld c, l
 	farjp CheckShininess
 
@@ -4281,57 +4244,63 @@ InitEnemyMon:
 	ld bc, MON_IVS - MON_OT_ID
 	add hl, bc
 	ld de, wEnemyMonIVs
 	ld bc, MON_POKERUS - MON_IVS
 	rst CopyBytes
 	inc hl
 	inc hl
 	inc hl
 	ld de, wEnemyMonLevel
 	ld bc, PARTYMON_STRUCT_LENGTH - MON_LEVEL
 	rst CopyBytes
 	ld a, [wEnemyMonSpecies]
 	ld [wCurSpecies], a
 	call GetBaseData
 	ld hl, wOTPartyMonNicknames
 	ld a, [wCurPartyMon]
 	call SkipNames
 	ld de, wEnemyMonNickname
 	ld bc, MON_NAME_LENGTH
 	rst CopyBytes
 	ld hl, wEnemyMonAttack
 	ld de, wEnemyStats
 	ld bc, PARTYMON_STRUCT_LENGTH - MON_ATK
 	rst CopyBytes
 	farcall ApplyStatusEffectOnEnemyStats
-	ld hl, wBaseType1
-	ld de, wEnemyMonType1
-	ld a, [hli]
-	ld [de], a
-	inc de
-	ld a, [hl]
-	ld [de], a
+        ld hl, wBaseType1
+        ld de, wEnemyMonType1
+        ld a, [hli]
+        ld [de], a
+        inc de
+        ld a, [hl]
+        ld [de], a
+        ld a, [wEnemyMonType1]
+        ld [wEnemyMonOriginalType1], a
+        ld a, [wEnemyMonType2]
+        ld [wEnemyMonOriginalType2], a
+        xor a
+        ld [wEnemyMonMimicryActive], a
 	; The enemy mon's base Sp. Def isn't needed since its base
 	; Sp. Atk is also used to calculate Sp. Def stat experience.
 	ld hl, wBaseStats
 	ld de, wEnemyMonBaseStats
 	ld b, NUM_STATS - 1
 .loop
 	ld a, [hli]
 	ld [de], a
 	inc de
 	dec b
 	jr nz, .loop
 	ld a, [wCurPartyMon]
 	ld [wCurOTMon], a
 	ret
 
 SwitchPlayerMon:
 	call ClearSprites
 	ld a, [wCurBattleMon]
 	ld [wLastPlayerMon], a
 	ld d, a
 	farcall TryActivateNaturalCure_Player
 	ld a, [wCurPartyMon]
 	ld [wCurBattleMon], a
 	call AddBattleParticipant
 	call InitBattleMon
