--- engine/items/item_effects.asm
+++ engine/items/item_effects.asm
@@ -404,57 +404,57 @@ ItemEffectsMedicineItems:
 	dw MintEffect ; LONELY_MINT
 	dw MintEffect ; ADAMANT_MINT
 	dw MintEffect ; NAUGHTY_MINT
 	dw MintEffect ; BRAVE_MINT
 	dw MintEffect ; BOLD_MINT
 	dw MintEffect ; IMPISH_MINT
 	dw MintEffect ; LAX_MINT
 	dw MintEffect ; RELAXED_MINT
 	dw MintEffect ; MODEST_MINT
 	dw MintEffect ; MILD_MINT
 	dw MintEffect ; RASH_MINT
 	dw MintEffect ; QUIET_MINT
 	dw MintEffect ; CALM_MINT
 	dw MintEffect ; GENTLE_MINT
 	dw MintEffect ; CAREFUL_MINT
 	dw MintEffect ; SASSY_MINT
 	dw MintEffect ; TIMID_MINT
 	dw MintEffect ; HASTY_MINT
 	dw MintEffect ; JOLLY_MINT
 	dw MintEffect ; NAIVE_MINT
 	dw MintEffect ; SERIOUS_MINT
 	dw MintEffect ; HARDY_MINT
 	dw MintEffect ; DOCILE_MINT
 	dw MintEffect ; BASHFUL_MINT
 	dw MintEffect ; QUIRKY_MINT
-	dw AbilityUp ; ABILITY_UP
-	dw PinkCure ; PINK_CURE
-	; dw RareCandyEffect ; EXP_CANDY_XS
-	; dw RareCandyEffect ; EXP_CANDY_S
-	; dw RareCandyEffect ; EXP_CANDY_M
-	; dw RareCandyEffect ; EXP_CANDY_L
-	; dw RareCandyEffect ; EXP_CANDY_XL
+        dw AbilityUp ; ABILITY_UP
+        dw PinkCure ; PINK_CURE
+        dw ExpCandyEffect ; EXP_CANDY_XS
+        dw ExpCandyEffect ; EXP_CANDY_S
+        dw ExpCandyEffect ; EXP_CANDY_M
+        dw ExpCandyEffect ; EXP_CANDY_L
+        dw ExpCandyEffect ; EXP_CANDY_XL
 .IndirectEnd:
 
 ItemEffectsValuableItems:
 	dw NoEffect            ; NUGGET
 	dw NoEffect            ; SILVER_LEAF
 	dw NoEffect            ; GOLD_LEAF
 	dw NoEffect            ; TINYMUSHROOM
 	dw NoEffect            ; BIG_MUSHROOM
 	dw NoEffect            ; SLOWPOKETAIL
 	dw NoEffect            ; PEARL
 	dw NoEffect            ; BIG_PEARL
 	dw NoEffect            ; STARDUST
 	dw NoEffect            ; STAR_PIECE
 	dw NoEffect            ; BRICK_PIECE
 	dw NoEffect            ; HEART_SCALE
 	dw NoEffect            ; BLUE_SHARD
 	dw NoEffect            ; GREEN_SHARD
 	dw NoEffect            ; RED_SHARD
 	dw NoEffect            ; YELLOW_SHARD
 	dw NoEffect            ; RARE_BONE
 	dw NoEffect            ; BALMMUSHROOM
 	dw NoEffect            ; BIG_NUGGET
 	dw NoEffect            ; COMET_SHARD
 	dw NoEffect            ; PEARL_STRING
 	dw NoEffect            ; BEACH_GLASS
@@ -1240,51 +1240,244 @@ RareCandyEffect:
 
 	xor a ; PARTYMON
 	ld [wMonType], a
 	predef CopyMonToTempMon
 
 	hlcoord 9, 0
 	lb bc, 10, 9
 	call Textbox
 
 	hlcoord 11, 1
 	ld bc, 4
 	predef PrintTempMonStats
 
 	call WaitPressAorB_BlinkCursor
 
 	xor a ; PARTYMON
 	ld [wMonType], a
 	ld a, [wCurPartySpecies]
 	ld [wTempSpecies], a
 	predef LearnLevelMoves
 
 	xor a
 	ld [wForceEvolution], a
 	farcall EvolvePokemon
 
-	jmp UseDisposableItem
+        jmp UseDisposableItem
+
+ExpCandyEffect:
+        farcall UpdateLevelCap
+        ld b, PARTYMENUACTION_HEALING_ITEM
+        call UseItem_SelectMon
+
+        jmp c, RareCandy_StatBooster_ExitMenu
+
+        call RareCandy_StatBooster_GetParameters
+
+        ld a, [wCurPartyLevel]
+        ld c, a
+        ld a, [wLevelCap]
+        cp c
+        jr z, .no_effect
+        jr nc, .can_gain_exp
+.no_effect
+        jmp NoEffectMessage
+
+.can_gain_exp
+        ; determine experience amount based on candy size
+        ld a, [wCurItem]
+        cp LOW(EXP_CANDY_XS)
+        jr z, .load_xs
+        cp LOW(EXP_CANDY_S)
+        jr z, .load_s
+        cp LOW(EXP_CANDY_M)
+        jr z, .load_m
+        cp LOW(EXP_CANDY_L)
+        jr z, .load_l
+        ld de, 30000            ; EXP_CANDY_XL
+        jr .got_amount
+.load_l
+        ld de, 10000
+        jr .got_amount
+.load_m
+        ld de, 3000
+        jr .got_amount
+.load_s
+        ld de, 800
+        jr .got_amount
+.load_xs
+        ld de, 100
+.got_amount
+
+        ; store original experience for message
+        ld a, MON_EXP
+        call GetPartyParamLocation
+        ld a, [hli]
+        ld [wStringBuffer3], a
+        ld a, [hli]
+        ld [wStringBuffer3 + 1], a
+        ld a, [hli]
+        ld [wStringBuffer3 + 2], a
+
+        ld a, MON_EXP + 2
+        call GetPartyParamLocation
+        ld a, [hl]
+        add e
+        ld [hld], a
+        ld a, [hl]
+        adc d
+        ld [hld], a
+        ld a, [hl]
+        adc 0
+        ld [hl], a
+
+        xor a ; PARTYMON
+        ld [wMonType], a
+        predef CopyMonToTempMon
+        farcall CalcLevel
+        ld c, d
+        ld a, [wLevelCap]
+        cp c
+        jr nc, .within_cap
+        ld c, a
+        ld d, a
+        farcall CalcExpAtLevel
+        ld a, MON_EXP
+        call GetPartyParamLocation
+        ldh a, [hMultiplicand + 0]
+        ld [hli], a
+        ldh a, [hMultiplicand + 1]
+        ld [hli], a
+        ldh a, [hMultiplicand + 2]
+        ld [hl], a
+.within_cap
+        push bc
+        ld a, MON_EXP
+        call GetPartyParamLocation
+        ld a, [hli]
+        ld d, a
+        ld a, [hli]
+        ld e, a
+        ld a, [hli]
+        ld b, a
+        ld a, b
+        ld hl, wStringBuffer3 + 2
+        sub [hl]
+        ld [wStringBuffer2], a
+        ld a, e
+        ld hl, wStringBuffer3 + 1
+        sbc [hl]
+        ld [wStringBuffer2 + 1], a
+        ld a, d
+        ld hl, wStringBuffer3
+        sbc [hl]
+        xor a
+        ld [wStringBuffer2 + 2], a
+        ld hl, ExpCandyGainedExpText
+        call PrintText
+        pop bc
+
+        ld a, MON_LEVEL
+        call GetPartyParamLocation
+        ld b, [hl]
+        ld a, c
+        cp b
+        jr z, .no_level_up
+        ld [hl], a
+        ld [wCurPartyLevel], a
+        ld c, a
+
+        ld a, MON_MAXHP
+        call GetPartyParamLocation
+        ld a, [hli]
+        ld b, a
+        ld c, [hl]
+        push bc
+        call UpdateStatsAfterItem
+
+        ld a, MON_MAXHP + 1
+        call GetPartyParamLocation
+
+        pop bc
+        ld a, [hld]
+        sub c
+        ld c, a
+        ld a, [hl]
+        sbc b
+        ld b, a
+        dec hl
+        ld a, [hl]
+        add c
+        ld [hld], a
+        ld a, [hl]
+        adc b
+        ld [hl], a
+        farcall LevelUpHappinessMod
+
+        ld a, PARTYMENUTEXT_LEVEL_UP
+        call ItemActionText
+
+        xor a ; PARTYMON
+        ld [wMonType], a
+        predef CopyMonToTempMon
+
+        hlcoord 9, 0
+        lb bc, 10, 9
+        call Textbox
+
+        hlcoord 11, 1
+        ld bc, 4
+        predef PrintTempMonStats
+
+        call WaitPressAorB_BlinkCursor
+
+        xor a ; PARTYMON
+        ld [wMonType], a
+        ld a, [wCurPartySpecies]
+        ld [wTempSpecies], a
+.level_loop
+        inc b
+        ld a, b
+        ld [wCurPartyLevel], a
+        push bc
+        predef LearnLevelMoves
+        pop bc
+        ld a, b
+        cp c
+        jr nz, .level_loop
+        ld a, c
+        ld [wCurPartyLevel], a
+        xor a
+        ld [wForceEvolution], a
+        farcall EvolvePokemon
+        jmp UseDisposableItem
+
+.no_level_up
+        jmp UseDisposableItem
+
+ExpCandyGainedExpText:
+        text_far Text_MonGainedExpPoint
 
 HealPowderEffect:
 	ld b, PARTYMENUACTION_HEALING_ITEM
 	call UseItem_SelectMon
 
 	jmp c, StatusHealer_ExitMenu
 
 	call UseStatusHealer
 	cp FALSE
 	jr nz, .not_used
 
 	ld c, HAPPINESS_BITTERPOWDER
 	farcall ChangeHappiness
 	call LooksBitterMessage
 	xor a
 ; fallthrough
 .not_used
 	jmp StatusHealer_Jumptable
 
 StatusHealingEffect:
 	ld b, PARTYMENUACTION_HEALING_ITEM
 	call UseItem_SelectMon
 	jmp c, StatusHealer_ExitMenu
 
 FullyHealStatus:
